basePath: /v1
definitions:
  models.AddReview:
    properties:
      message:
        type: string
      projectID:
        type: integer
      starRating:
        type: integer
      userID:
        type: integer
    type: object
  models.ChangePassword:
    properties:
      email:
        type: string
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  models.CountryData:
    properties:
      countryCode:
        type: string
      countryName:
        type: string
      id:
        type: integer
    type: object
  models.CountryDataProfile:
    properties:
      countryName:
        type: string
      id:
        type: integer
    type: object
  models.CreateProject:
    properties:
      attachment:
        items:
          type: string
        type: array
      category:
        type: integer
      description:
        type: string
      price:
        type: number
      skills:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  models.EditProject:
    properties:
      attachment:
        items:
          type: string
        type: array
      category:
        type: integer
      description:
        type: string
      price:
        type: number
      skills:
        items:
          type: integer
        type: array
      title:
        type: string
    type: object
  models.EducationParameters:
    properties:
      endYear:
        type: integer
      name:
        type: string
      startYear:
        type: integer
    type: object
  models.EducationReturnValue:
    properties:
      endYear:
        type: integer
      id:
        type: integer
      name:
        type: string
      startYear:
        type: integer
    type: object
  models.ExperienceParameters:
    properties:
      description:
        type: string
      endYear:
        type: integer
      place:
        type: string
      position:
        type: string
      startYear:
        type: integer
    type: object
  models.ExperienceReturnValue:
    properties:
      description:
        type: string
      endYear:
        type: integer
      id:
        type: integer
      place:
        type: string
      position:
        type: string
      startYear:
        type: integer
    type: object
  models.GetUserProjectResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      status:
        type: string
      title:
        type: string
    type: object
  models.LoginUserPassword:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.OwnerInfo:
    properties:
      firstName:
        type: string
      id:
        type: string
      lastName:
        type: string
      location:
        type: string
      member:
        type: string
      projectCompleted:
        type: integer
    type: object
  models.PageInfoSchema:
    properties:
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
    type: object
  models.PortfolioRequestParameter:
    properties:
      description:
        type: string
      endYear:
        type: integer
      link:
        type: string
      startYear:
        type: integer
      title:
        type: string
    type: object
  models.PortfolioReturnParameter:
    properties:
      description:
        type: string
      endYear:
        type: integer
      id:
        type: integer
      link:
        type: string
      startYear:
        type: integer
      title:
        type: string
    type: object
  models.ProjectAcceptMemberParameter:
    properties:
      freelancerID:
        type: integer
      trelloKey:
        type: string
    type: object
  models.ProjectCategoryData:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.ProjectDetailInterestedMember:
    properties:
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
    type: object
  models.ProjectDetailResponse:
    properties:
      attachment:
        items:
          $ref: '#/definitions/models.ProjectLinksResponse'
        type: array
      category:
        type: string
      description:
        type: string
      id:
        type: integer
      interestedMembers:
        items:
          $ref: '#/definitions/models.ProjectDetailInterestedMember'
        type: array
      owner:
        $ref: '#/definitions/models.OwnerInfo'
        type: object
      price:
        type: number
      skills:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  models.ProjectInformationForReview:
    properties:
      id:
        type: integer
      title:
        type: string
    type: object
  models.ProjectLinksResponse:
    properties:
      id:
        type: integer
      project_link:
        type: string
    type: object
  models.RegistrationUserUsingPassword:
    properties:
      description:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      location:
        type: integer
      password:
        type: string
      phoneCode:
        type: integer
      phoneNumber:
        type: integer
      skills:
        items:
          type: integer
        type: array
      username:
        type: string
    type: object
  models.ResetPassword:
    properties:
      email:
        type: string
    type: object
  models.ResponseOKGetAllCountries:
    properties:
      code:
        type: string
      data:
        items:
          $ref: '#/definitions/models.CountryData'
        type: array
      message:
        type: string
    type: object
  models.ResponseOKGetUserProfile:
    properties:
      code:
        type: string
      data:
        $ref: '#/definitions/models.UserProfile'
        type: object
      message:
        type: string
    type: object
  models.ResponseOKGetUserProject:
    properties:
      code:
        type: string
      data:
        items:
          $ref: '#/definitions/models.GetUserProjectResponse'
        type: array
      message:
        type: string
    type: object
  models.ResponseOKLogin:
    properties:
      code:
        type: string
      data:
        $ref: '#/definitions/models.TokenResponse'
        type: object
      message:
        type: string
    type: object
  models.ResponseOKProjectCategory:
    properties:
      code:
        type: string
      data:
        items:
          $ref: '#/definitions/models.ProjectCategoryData'
        type: array
      message:
        type: string
    type: object
  models.ResponseOKProjectDetail:
    properties:
      code:
        type: string
      data:
        items:
          $ref: '#/definitions/models.ProjectDetailResponse'
        type: array
      message:
        type: string
    type: object
  models.ResponseOKUserReviews:
    properties:
      code:
        type: string
      data:
        items:
          $ref: '#/definitions/models.ReviewInfo'
        type: array
      message:
        type: string
    type: object
  models.ResponseWithNoBody:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  models.ResponseWithStringData:
    properties:
      code:
        type: string
      data:
        type: string
      message:
        type: string
    type: object
  models.ReviewInfo:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      message:
        type: string
      project:
        $ref: '#/definitions/models.ProjectInformationForReview'
        type: object
      reviewer:
        $ref: '#/definitions/models.UserInformationForReview'
        type: object
      starRating:
        type: integer
    type: object
  models.SearchProjectQuery:
    properties:
      category:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      price:
        type: number
      skill:
        items:
          type: string
        type: array
      title:
        type: string
    type: object
  models.SearchProjectResponse:
    properties:
      PageMeta:
        $ref: '#/definitions/models.PageInfoSchema'
        type: object
      project:
        items:
          $ref: '#/definitions/models.SearchProjectQuery'
        type: array
    type: object
  models.TokenResponse:
    properties:
      expire:
        type: string
      token:
        type: string
    type: object
  models.UpdateProfile:
    properties:
      description:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      location:
        type: integer
      username:
        type: string
    type: object
  models.UpdateResetPassword:
    properties:
      password:
        type: string
      token:
        type: string
    type: object
  models.UpdateSkills:
    properties:
      skills:
        items:
          type: integer
        type: array
    type: object
  models.UserInformationForReview:
    properties:
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
    type: object
  models.UserProfile:
    properties:
      balance:
        type: number
      description:
        type: string
      education:
        items:
          $ref: '#/definitions/models.EducationReturnValue'
        type: array
      email:
        type: string
      experience:
        items:
          $ref: '#/definitions/models.ExperienceReturnValue'
        type: array
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      location:
        $ref: '#/definitions/models.CountryDataProfile'
        type: object
      member:
        type: string
      phoneCode:
        type: integer
      phoneNumber:
        type: integer
      picture:
        type: string
      portfolio:
        items:
          $ref: '#/definitions/models.PortfolioReturnParameter'
        type: array
      projectCompleted:
        type: integer
      skill:
        items:
          $ref: '#/definitions/models.UserSkills'
        type: array
      username:
        type: string
    type: object
  models.UserSkills:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact:
    name: API Support
  description: Swagger API for Golang Project PMS + Freelancer.
  license: {}
  termsOfService: http://swagger.io/terms/
  title: Swagger API
  version: "1.0"
paths:
  /acceptProjectInterest/{id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Freelancer which you want to accept
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.ProjectAcceptMemberParameter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Accepting Freelancer to Project
      tags:
      - Project
  /addEducation:
    post:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Data Format to add education
        in: body
        name: Data
        required: true
        schema:
          $ref: '#/definitions/models.EducationParameters'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Add User Education
      tags:
      - Education
  /addExperience:
    post:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Data Format to add experience
        in: body
        name: Data
        required: true
        schema:
          $ref: '#/definitions/models.ExperienceParameters'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Adding User Experience
      tags:
      - Experience
  /addPortfolio:
    post:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: New Portfolio Description
        in: body
        name: Parameters
        required: true
        schema:
          $ref: '#/definitions/models.PortfolioRequestParameter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Adding User Portfolio
      tags:
      - Portfolio
  /addProject:
    post:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Data Format to add project
        in: body
        name: Data
        required: true
        schema:
          $ref: '#/definitions/models.CreateProject'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Adding User Project
      tags:
      - Project
  /allCountries:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOKGetAllCountries'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Getting all list of countries
      tags:
      - Location
  /allProjectCategory:
    get:
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOKProjectCategory'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Get All Project Category List
      tags:
      - Project
  /allSkills:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Getting all list of skills
      tags:
      - Skills
  /change-password:
    put:
      consumes:
      - application/json
      parameters:
      - description: Information needed to change password
        in: body
        name: Info
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Register new user using email and password
      tags:
      - User
  /completeProject/{id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Review Done For Project Owner
      tags:
      - Project
  /deleteEducation/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Education ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Deleting User Education
      tags:
      - Education
  /deleteExperience/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Deleting User Experience
      tags:
      - Experience
  /deletePortfolio/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Deleting User Portfolio
      tags:
      - Portfolio
  /editEducation/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Education ID
        in: path
        name: id
        required: true
        type: integer
      - description: New Education Description
        in: body
        name: Description
        required: true
        schema:
          $ref: '#/definitions/models.EducationParameters'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Updating User Education
      tags:
      - Education
  /editExperience/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Experience ID
        in: path
        name: id
        required: true
        type: integer
      - description: New Experience Description
        in: body
        name: Description
        required: true
        schema:
          $ref: '#/definitions/models.ExperienceParameters'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Updating User Experience
      tags:
      - Experience
  /editPortfolio/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Portfolio Description
        in: body
        name: Description
        required: true
        schema:
          $ref: '#/definitions/models.PortfolioRequestParameter'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Updating User Portfolio
      tags:
      - Portfolio
  /editProject/{id}:
    put:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      - description: Data Format to edit project
        in: body
        name: Data
        required: true
        schema:
          $ref: '#/definitions/models.EditProject'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Edit User Project
      tags:
      - Project
  /editSkills:
    put:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: New Skills ID List
        in: body
        name: Data
        required: true
        schema:
          $ref: '#/definitions/models.UpdateSkills'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Updating User Skills
      tags:
      - Skills
  /login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Account
        in: body
        name: parameter
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOKLogin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Login user using email and password
      tags:
      - User
  /logout:
    post:
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Logout
      tags:
      - User
  /projectDetail/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOKProjectDetail'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: User Project Detail
      tags:
      - Project
  /register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/models.RegistrationUserUsingPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Register new user using email and password
      tags:
      - User
  /resetPassword:
    post:
      consumes:
      - application/json
      parameters:
      - description: Information needed to change password
        in: body
        name: Info
        required: true
        schema:
          $ref: '#/definitions/models.ResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Reset Password (Forget Password Feature)
      tags:
      - User
  /searchProject:
    get:
      parameters:
      - description: page
        in: query
        name: page
        required: true
        type: integer
      - description: size
        in: query
        name: size
        required: true
        type: integer
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Sort
        enum:
        - newest
        - highestprice
        - lowestprice
        in: query
        name: sort
        type: string
      - description: Filter Skills
        in: query
        items:
          type: integer
        name: filter
        type: array
      - description: Filter Category
        in: query
        name: category
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchProjectResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Search and filter project here
      tags:
      - Project
  /submitProjectForReview/{id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Submit Project for review
      tags:
      - Project
  /submitProjectInterest/{id}:
    post:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Submit Project Interest
      tags:
      - Project
  /updateNewPassword:
    post:
      consumes:
      - application/json
      parameters:
      - description: Information needed to update password
        in: body
        name: Info
        required: true
        schema:
          $ref: '#/definitions/models.UpdateResetPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Update Password (after reset password)
      tags:
      - User
  /updateProfile:
    put:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: New Data for User Profile
        in: body
        name: Description
        required: true
        schema:
          $ref: '#/definitions/models.UpdateProfile'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Updating User Profile
      tags:
      - User
  /uploadAttachment:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Upload File
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Uploading Attachment here
      tags:
      - Project
  /uploadPicture:
    post:
      consumes:
      - multipart/form-data
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Upload File
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithStringData'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Uploading Picture here
      tags:
      - User
  /userProfile:
    get:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOKGetUserProfile'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: User Profile Data
      tags:
      - User
  /userProfile/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOKGetUserProfile'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: User Profile Data
      tags:
      - User
  /userProjects:
    get:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOKGetUserProject'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: User Projects
      tags:
      - Project
  /userReview:
    get:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOKUserReviews'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Get User Review
      tags:
      - User
    post:
      consumes:
      - application/json
      parameters:
      - description: Token Header
        in: header
        name: token
        required: true
        type: string
      - description: Data Format to add review
        in: body
        name: Data
        required: true
        schema:
          $ref: '#/definitions/models.AddReview'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ResponseWithNoBody'
      summary: Add User Review
      tags:
      - User
swagger: "2.0"
